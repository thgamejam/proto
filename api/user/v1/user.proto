syntax = "proto3";

package thjam.api.user.v1;

import "validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "proto/api/user/v1;v1";

service User {
  // 创建用户
  rpc CreateUser (CreateUserRequest) returns (UserInfo) {}

  // 使用ID获取用户
  rpc GetUserInfoByAccountID (GetUserInfoByAccountIDRequest) returns (UserInfo) {}

  // 获取用户信息
  rpc GetUserInfo (GetUserInfoRequest) returns (UserInfo) {}

  // 获得多个用户的信息
  rpc GetMultipleUsersInfo (GetMultipleUsersInfoRequest) returns (GetMultipleUsersInfoReply) {}

  // UserEdit 修改用户
  // 该请求需要保证请求的id已经存在，如果不存在，该接口会返回失败
  // 编辑接口不关心用户信息完成度，需要传入全量的信息
  rpc UserEdit (UserEditRequest) returns (google.protobuf.Empty) {}

  // UserEditTags 修改用户标签
  // 该请求需要保证至多3个标签，如果大于3个，该接口会返回失败
  rpc UserEditTags(UserEditTagsRequest) returns (google.protobuf.Empty) {}

  // 获得用户拥有的所有标签
  rpc GetTagList (GetTagListRequest) returns (GetTagListReply) {}

  // 获取上传头像的链接
  rpc GetUploadAvatarURL (GetUploadAvatarURLRequest) returns (GetUploadAvatarURLReply) {}

  // 封禁用户
  rpc BanUser(BanUserRequest) returns (google.protobuf.Empty) {}

  // 解封用户
  rpc DeBanUser(DeBanUserRequest) returns (google.protobuf.Empty) {}



  // 关注服务相关
  // 获取用户粉丝信息列表
  rpc GetUserFansList(GetUserListReq) returns (GetUserListReply) {
    option(google.api.http) = {
      get: "/web/v1/users/relationship/fans"
      body: "*"
    };
  }

  // 获取用户关注信息列表
  rpc GetUserFollowList(GetUserListReq) returns (GetUserListReply) {
    option(google.api.http) = {
      get: "/web/v1/users/relationship/follows"
      body: "*"
    };
  }

  // 获取用户关注数量
  rpc GetUserFollowInfo(GetUserFollowInfoReq) returns (GetUserFollowInfoReply) {
    option(google.api.http) = {
      get: "/web/v1/users/relationship/count"
      body: "*"
    };
  }

  // 关注用户
  rpc FollowUser(FollowUserReq) returns (google.protobuf.Empty) {
    option(google.api.http) = {
      post: "/web/v1/users/relationship/followUser"
      body: "*"
    };
  }

  // 取消关注用户
  rpc CancelFollowUser(CancelFollowUserReq) returns (google.protobuf.Empty) {
    option(google.api.http) = {
      delete: "/web/v1/users/relationship/deleteRelationship"
      body: "*"
    };
  }

}


// UserInfo 用户信息
message UserInfo {
  uint32 id = 1;            // user-id
  string username = 2;      // 用户名
  string bio = 3;           // 简介
  string avatar_url = 4;    // 头像
  repeated string tags = 5; // 标签
}

// CreateUserRequest 创建用户请求
message CreateUserRequest {
  uint32 account_id = 1;
}

// GetUserInfoByAccountIDRequest 获取用户请求
message GetUserInfoByAccountIDRequest {
  uint32 account_id = 1;
}

// GetUserInfoRequest 获取用户信息请求
message GetUserInfoRequest {
  uint32 id = 1;
}

// GetMultipleUsersInfoRequest 获取多个用户信息请求
message GetMultipleUsersInfoRequest {
  repeated uint32 ids = 1;
}
// GetMultipleUsersInfoReply 获取多个用户信息回复
message GetMultipleUsersInfoReply {
  repeated UserInfo info = 1;
}

// UserEditRequest 修改用户请求
message UserEditRequest {
  uint32 id = 1;                  // user-id
  optional string username = 2;   // 用户名 可选
  optional string bio = 3;        // 简介 可选
  optional string avatar_url = 4; // 头像 可选
}

// UserEditTagsRequest 修改用户标签请求
message UserEditTagsRequest {
  uint32 id = 1;            // user-id
  repeated uint32 tags = 2; // tag-id列表
}

// GetTagListRequest 获得用户拥有的所有标签请求
message GetTagListRequest {
  uint32 id = 1;  // user-id
}
// GetTagListReply 获得用户拥有的所有标签回复
message GetTagListReply {
  map<uint32, string> tags = 1; // 标签<标签id, 标签内容>
}

// GetUploadAvatarURLRequest 获取上传头像使用URL请求
message GetUploadAvatarURLRequest {
  uint32 id = 1;    // user-id
  string crc32 = 2; // 头像文件的crc32-hash值
  string sha1 = 3;  // 头像文件的sha1-hash值
}
// GetUploadAvatarURLReply 获取上传头像使用URL回复
message GetUploadAvatarURLReply {
  string url = 1;
}

message BanUserRequest {
  uint32 id = 1;  // user-id
}
message DeBanUserRequest {
  uint32 id = 1;  // user-id
}

// 获取用户关注列表请求
message GetUserListReq {
  uint32 userid = 1;
  uint32 page = 2;
}
// 返回关注分页用户id列表
message GetUserListReply{
  repeated uint32 userid_list = 1;
}

// 关注用户请求
message FollowUserReq{
  uint32 userid = 1;
  uint32 follow_user_id = 2;
}

// 取消关注用户请求
message CancelFollowUserReq{
  uint32 userid = 1;
  uint32 follow_user_id = 2;
}

// 获取用户关注请求
message GetUserFollowInfoReq{
  uint32 userid = 1;
}
message GetUserFollowInfoReply{
  uint32 userid = 1;
  uint32 fansCount = 2;
  uint32 followCount = 3;
}
