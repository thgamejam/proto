syntax = "proto3";

package thjam.api.passport.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";

option go_package = "proto/api/passport/v1;v1";

service Passport {

  // 账户登录 & 续签jwt
  rpc Login(LoginRequest) returns (LoginReply) {
    option(google.api.http) = {
      post: "/web/v1/users/login"
      body: "*"
    };
  }

  // 预创建账户
  rpc CreateAccount (CreateAccountRequest) returns (CreateAccountReply) {
    option(google.api.http) = {
      post: "/web/v1/users"
      body: "*"
    };
  }

  // 验证邮箱且创建用户
  rpc VerifyEmail(VerifyEmailRequest) returns (LoginReply) {
    option(google.api.http) = {
      post: "/web/v1/users/email-auth"
      body: "*"
    };
  }

  // 登出
  rpc Logout(LogoutRequest) returns (LogoutReply) {
    option(google.api.http) = {
      post: "/web/v1/users/logout"
      body: "*"
    };
  }

  // 获取密码加密公钥，随机的
  rpc GetPublicKey(GetPublicKeyRequest) returns (GetPublicKeyReply) {
    option(google.api.http) = {
      get: "/web/v1/keys"
    };
  }

  // 修改密码
  rpc ChangePassword(ChangePasswordRequest) returns (LoginReply) {
    option(google.api.http) = {
      put: "/web/v1/users/password"
      body: "*"
    };
  }
}


// 密码类型
message Password {
  string hash = 1   [(validate.rules).string.len = 16]; // 秘钥哈希
  string value = 2  [(validate.rules).string = {min_len: 64, max_len: 256}];
}

// 登录请求
message LoginRequest {
  message User {
    string email = 1 [(validate.rules).string = {email: true, max_len: 32}];
    Password password = 2;
  }
  User user = 1;
  string token = 2; // 验证码token
}
// 登录返回
message LoginReply {
  message User {
    uint32 id = 1;    // user-id
    string token = 2; // JWT
    string username = 3;
    string bio = 4;   // 简介
    string image = 5; // 头像
  }
  User user = 1;
}

// 预创建账户请求
message CreateAccountRequest {
  message User {
    string email = 1 [(validate.rules).string = {email: true, max_len: 32}];
    Password password = 2;
  }
  User user = 1;
  string token = 2;     // 验证码token
}
// 预创建账户返回
message CreateAccountReply {
}

// 验证邮箱请求
message VerifyEmailRequest {
  string sid = 1 [(validate.rules).string.len = 32];    // 会话id
  string key = 2 [(validate.rules).string.len = 32];    // 校验哈希
}

// 注销
message LogoutRequest{
}
message LogoutReply{
}

message GetPublicKeyRequest {
}
message GetPublicKeyReply {
  message PublicKey {
    string hash = 1;  // 秘钥哈希
    string value = 2; // 公钥值
  }
  PublicKey key = 1;
}

// 修改密码请求
message ChangePasswordRequest {
  Password oldPassword = 1;
  Password newPassword = 2;
}
