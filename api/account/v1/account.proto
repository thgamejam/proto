syntax = "proto3";

package account.v1;

import "validate/validate.proto";
import "google/protobuf/empty.proto";

option go_package = "service/api/account/v1;v1";

service Account {
  // PrepareCreateEMailAccount 预创建邮箱账号
  rpc PrepareCreateEMailAccount (PrepareCreateEMailAccountReq) returns (PrepareCreateEMailAccountReply) {}

  // FinishCreateEMailAccount 完成创建邮箱账号
  rpc FinishCreateEMailAccount (FinishCreateEMailAccountReq) returns (FinishCreateEMailAccountReply) {}

  // GetAccount 使用ID获取账号
  rpc GetAccount (GetAccountReq) returns (GetAccountReply) {}

  // ExistAccountEMail 是否存在邮箱
  rpc ExistAccountEMail (ExistAccountEMailReq) returns (ExistAccountEMailReply) {}

  // VerifyPassword 校验密码
  rpc VerifyPassword(VerifyPasswordReq) returns (VerifyPasswordReply) {}

  // SavePassword 保存密码
  rpc SavePassword(SavePasswordReq) returns (google.protobuf.Empty) {}

  // GetKey 获取密码加密公钥
  rpc GetKey (google.protobuf.Empty) returns (GetKeyReply) {}

}

// PrepareCreateEMailAccountReq 预创建邮箱账号请求
message PrepareCreateEMailAccountReq {
  // 电子邮箱地址
  string email = 1 [(validate.rules).string = {email: true, max_len: 32}];
  // 密文密码 len:64-256
  string ciphertext = 2 [(validate.rules).string = {min_len: 64, max_len: 256}];
  // 公钥摘要 len:16
  string hash = 3 [(validate.rules).string.len = 16];
}
// PrepareCreateEMailAccountReply 预创建账号回复
message PrepareCreateEMailAccountReply {
  string sid = 1; // 会话号session id 使用uuid
}

// 完成创建邮箱账号请求
message FinishCreateEMailAccountReq {
  string sid = 1; // 会话号session id 使用uuid
}
// 完成创建账号ID回复
message FinishCreateEMailAccountReply {
  uint32 id = 1; // 账户ID
}

// GetAccountReq 使用ID获取账号请求
message GetAccountReq {
  uint32 id = 1 [(validate.rules).uint32 = {gt: 0}];
}
// GetAccountReply 使用ID获取账号回复
message GetAccountReply {
  string uuid = 1;    // uuid
  string email = 2;   // 电子邮箱地址
  uint32 telCode = 3; // 国际区号
  string phone = 4;   // 电话号
  uint32 status = 5;  // 账号状态
}

// ExistAccountEMailReq 检查邮箱是否存在请求
message ExistAccountEMailReq {
  string email = 1 [(validate.rules).string = {email: true, max_len: 32}];   // 电子邮箱地址
}
// ExistAccountEMailReply 检查邮箱是否存在回复
message ExistAccountEMailReply {
  bool ok = 1;  // true 存在, false 不存在
}

// VerifyPasswordReq 验证密码请求
message VerifyPasswordReq {
  // 用户登录标识，必须选其一，否则将返回错误
  optional uint32 id = 1 [(validate.rules).uint32 = {gt: 0}];  // 账户id
  optional string email = 2 [(validate.rules).string = {email: true, max_len: 32}]; // 邮箱
  // 密文密码 len:64-256
  string ciphertext = 3 [(validate.rules).string = {min_len: 64, max_len: 256}];
  // 公钥摘要 len:16
  string hash = 4 [(validate.rules).string.len = 16];
}
// VerifyPasswordReply 验证密码回复
message VerifyPasswordReply {
  uint32 id = 1;
}

// SavePasswordReq 保存密码请求
message SavePasswordReq {
  // 用户id
  uint32 id = 1 [(validate.rules).uint32 = {gt: 0}];
  // 密文密码 len:64-256
  string ciphertext = 2 [(validate.rules).string = {min_len: 64, max_len: 256}];
  // 公钥摘要 len:16
  string hash = 3 [(validate.rules).string.len = 16];
}

// GetKeyReply 获取公钥回复
message GetKeyReply {
  string hash = 1;  // 密钥hash
  string key = 2;   // 公钥内容
}
